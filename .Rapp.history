for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in unique(NEI$type)) {  ## and for each type#
  		total <- sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type=="atype")))  ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(ayear, atype, total))  ## write to results data frame#
}
}
warnings()
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.numeric())
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type=="atype")))  ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(ayear, atype, total))  ## write to results data frame#
}
}
warnings()
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.numeric(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type=="atype")))  ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(ayear, atype, total))  ## write to results data frame#
	}#
}
emission_totals
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.numeric(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype)))  ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(ayear, atype, total))  ## write to results data frame#
	}#
}
emission_totals
library("ggplot2")
qplot(year, total_emissions, data=emission_totals, facets=. ~ drv)
qplot(year, total_emissions, data=emission_totals, facets=. ~ type)
?round
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.numeric(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(ayear, atype, total))  ## write to results data frame#
	}#
}
qplot(year, total_emissions, data=emission_totals, facets=. ~ type)
class(total_emissions)
class(emission_totals$total_emissions)
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.numeric(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(as.integer(ayear), as.character(atype), as.integer(total)))  ## write to results data frame#
	}#
}
class(emission_totals$total_emissions)
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(as.integer(ayear), as.character(atype), as.integer(total)))  ## write to results data frame#
	}#
}
class(emission_totals$total_emissions)
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.integer(), stringsAsFactors=FALSE)
class(emission_totals$total_emissions)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(as.integer(ayear), as.character(atype), as.integer(total)))  ## write to results data frame#
	}#
}
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals[nrow(emission_totals)+1,] <- t(c(as.integer(ayear), as.character(atype), as.integer(total)))  ## write to results data frame#
	}#
}
class(emission_totals$total_emissions)
emission_totals
summary(emission_totals)
c(4, 5, 6)
class(c(4, 5, 6))
class(c(4, "5", 6))
class(c(as.integer(4), "5", 6))
list(1,2,3,4,5)
list(1,2,3,"4",5)
list(1,2,3,"4",5, "apple")
list(1,2,3,"4",5, "apple",5)
data.frame(year=as.integer(2009), type=as.character(something), total=as.integer(201300), stringsAsFactors=FALSE)
data.frame(year=as.integer(2009), type=as.character("something"), total=as.integer(201300), stringsAsFactors=FALSE)
emission_totals <- data.frame(year=as.integer(), type=as.character(), total_emissions=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals <- rbind(emission_totals, data.frame(as.integer(ayear), as.character(atype), as.integer(total)))  ## write to results data frame#
	}#
}
summary(emission_totals)
emission_totals
emission_totals <- data.frame(year=as.integer(), type=as.character(), total=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals <- rbind(emission_totals, data.frame(year=as.integer(ayear), type=as.character(atype), total=as.integer(total)))  ## write to results data frame#
	}#
}
emission_totals
summary(emission_totals)
class(emission_totals)
str(emission_totals)
emission_totals <- data.frame(year=as.integer(), type=as.character(), total=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals <- rbind(emission_totals, data.frame(year=as.integer(ayear), type=as.character(atype), total=as.integer(total), stringsAsFactors=FALSE))  ## write to results data frame#
	}#
}
str(emission_totals)
qplot(year, total, data=emission_totals, facets=. ~ type)
emission_totals <- data.frame(year=as.character(), type=as.character(), total=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals <- rbind(emission_totals, data.frame(year=as.character(ayear), type=as.character(atype), total=as.integer(total), stringsAsFactors=FALSE))  ## write to results data frame#
	}#
}
qplot(year, total, data=emission_totals, facets=. ~ type)
ggplot(emission_totals, aes(x=year, y=total)) + geom_line() + facet_grid(. ~ type)
emission_totals
ggplot(emission_totals, aes(x=year, y=total)) + facet_grid(. ~ type) + geom_line()
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_line()
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_bar()
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_bar(stat="identity")
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_bar(stat="identity", aes(fill=factor(year)))
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_bar(stat="identity", aes(fill=factor(year))) + xlab("Year") + ylab("PM 2.5 Emissions (tons)") + ggtitle("Total PM 2.5 Emissions in Baltimore City, MD Divided By Type")
source("plot3.R")
NEI <- readRDS("summarySCC_PM25.rds")#
SCC <- readRDS("Source_Classification_Code.rds")
emission_totals <- data.frame(year=as.character(), type=as.character(), total=as.integer(), stringsAsFactors=FALSE)
for (ayear in unique(NEI$year)) {  ## for each year#
	for (atype in as.character(unique(NEI$type))) {  ## and for each type#
  		total <- round(sum(with(NEI, subset(Emissions, fips=="24510" & year==ayear & type==atype))))   ## calculate total emissions for baltimore city#
  		emission_totals <- rbind(emission_totals, data.frame(year=as.character(ayear), type=as.character(atype), total=as.integer(total), stringsAsFactors=FALSE))  ## write to results data frame#
	}#
}
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_bar(stat="identity", aes(fill=factor(year))) + xlab("Year") + ylab("PM 2.5 Emissions (tons)") + ggtitle("Total PM 2.5 Emissions in Baltimore City, MD Divided By Type")
png(file="plot3.png", width=504, height=504, bg="white")  ## engage png device
ggplot(emission_totals, aes(year, total)) + facet_grid(. ~ type) + geom_bar(stat="identity", aes(fill=factor(year))) + xlab("Year") + ylab("PM 2.5 Emissions (tons)") + ggtitle("Total PM 2.5 Emissions in Baltimore City, MD Divided By Type")
dev.off()
source("plot3.R")
dir()
source("plot3.R")
library("ggplot2")
dir()
source("plot3.R")
dir()
source("plot3.R")
dir()
str(SCC)
unique(NEI$Pollutant)
head(SCC)
unique(SCC$SCC.Level.Three)
grep("coal", SCC$SCC.Level.Three, values=TRUE)
grep("coal", SCC$SCC.Level.Three, value=TRUE)
grep("Coal", SCC$SCC.Level.Three, value=TRUE)
head(SCC)
SCC[SCC$SCC == 305310,]
SCC[SCC$SCC == "305310",]
head(NEI)
grep("305310", SCC, value=TRUE)
grep(305310, SCC, value=TRUE)
grep("[Cc]oal", SCC$SCC.Level.Three, value=TRUE)
grep("[Cc]oal", SCC$SCC.Level.One, value=TRUE)
grep("[Cc]oal", SCC$SCC.Level.Two, value=TRUE)
grep("[Cc]oal", SCC$SCC.Level.Three, value=TRUE)
SCC[grepl("[Cc]oal", SCC$SCC.Level.Three),]
grep("[Cc]oal", SCC$SCC.Level.Four, value=TRUE)
grep("\d{3}002\d{2}", SCC$SCC, value=TRUE)
grep(\d{3}002\d{2}, SCC$SCC, value=TRUE)
grep("\\d{3}002\\d{2}", SCC$SCC, value=TRUE)
SSC[grepl("\\d{3}002\\d{2}", SCC$SCC, value=TRUE),]
SCC[grepl("\\d{3}002\\d{2}", SCC$SCC, value=TRUE),]
SCC[grepl("\\d{3}002\\d{2}", SCC$SCC),]
SCC[grepl("\\d{3}002\\d{2}", SCC$SCC),]$Short.name
SCC[grepl("\\d{3}002\\d{2}", SCC$SCC),]$Short.Name
grep("[Cc]oal", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!:\s[Mm]ining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!:\\s[Mm]ining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!:[Mm]ining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?![Mm]ining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!(:[Mm]ining))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?![Mm]ining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!([Mm]ining))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!Mining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal (?!Mining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal (?!M)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal", SCC$Short.Name, value=TRUE)
grep("[Cc]oal\\s", SCC$Short.Name, value=TRUE)
grep("[Cc]oal"(!?M), SCC$Short.Name, value=TRUE)
grep("[Cc]oal(!?(\\sM))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(!?(\\sMining))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(!?(Mining))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(!?(\\sMining.*))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(!?\\sMining.*)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(!?Mining.*)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!Mining.*)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!\\sMining.*)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!(\\sMining.*))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!(\sMining.*))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!(\\sMining.*))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!(Mining.*))", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!Mining.*)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?!Mining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?=Mining)", SCC$Short.Name, value=TRUE)
grep("[Cc]oal(?=Mining)", SCC$Short.Name, value=TRUE, perl=TRUE)
grep("[Cc]oal(?!\\sMining)", SCC$Short.Name, value=TRUE, perl=TRUE)
grep("[Cc]oal(?!\\sMining)?", SCC$Short.Name, value=TRUE, perl=TRUE)
SCC[grepl("[Cc]oal(?!\\sMining)?", perl=TRUE),]$Short.Name
SCC[grepl(SSC$Short.Name,"[Cc]oal(?!\\sMining)?", perl=TRUE),]$Short.Name
SCC[grepl("[Cc]oal(?!\\sMining)?", SSC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Cc]oal(?!\\sMining)?", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Cc]oal", SCC$Short.Name, perl=TRUE) & grepl("![Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("![Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[!grepl("[Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Cc]oal", SCC$Short.Name, perl=TRUE) & !grepl("[Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Cc]oal", SCC$Short.Name, perl=TRUE) & !grepl("[Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]
SCC[grepl("[Cc]oal", SCC$Short.Name, perl=TRUE) & !grepl("[Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]$SCC
coal <- SCC[grepl("[Cc]oal", SCC$Short.Name, perl=TRUE) & !grepl("[Cc]oal\\sMining", SCC$Short.Name, perl=TRUE),]
coal$SCC
SSC[SSC$SSC == "2199001000"]
SCC[SCC$SCC == "2199001000",]
unique(coal$SCC)
FEI[FEI$SCC %in% coal$SCC,]
NEI[NEI$SCC %in% coal$SCC,]
source("plot4.R")
SCC[grepl("[Mm]otor [Vv]ehicle", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Vv]ehicle", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Gg]asoline", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("[Gg]asoline|[Dd]iesel", SCC$Short.Name, perl=TRUE),]$Short.Name
SCC[grepl("Highway Veh|Off-highway Gasoline|Off-highway Diesel", SCC$Short.Name, perl=TRUE),]$Short.Name
source("plot5.R")
source("plot6.R")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
source("plot6.R")
ppois(3, lambda=2.5*4)
ppois(10, lambda=5*3)
ppois(14, lambda=15*100)
ppois(14, lambda=15)
ppois(16, lambda=15)
mn <- 1100
s <- 30
n <- 9
mn + c(-1,1)*qt(0.95, n-1)*s/sqrt(n)
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- 2.1
mn <- -2
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- 2.6
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- 1.5
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .3
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- 0.287
mn
n <- 10
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
n <- 20
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .19
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .6
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- 1.28
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
n
n <- 10
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .6
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .68
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- 1
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .9
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .95
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .96
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .98
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
s <- .975
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
mn + c(-1,1)*qt(0.975, n-1)*s/sqrt(n)
x1 <- 3
x2 <- 5
n1 <- 10
n2 <- 10
md <- -2
library("data.table")
pwd()
swd()
dir()
getwd()
setwd("/Users/Ben/Documents/School/Coursera/reproducible_research/RepData_PeerAssessment2/RepRes_assignment2")
dir()
head(fread("repdata_data_StormData.csv"))
library(data.table)
library("data.table")
head(readlines("repdata_data_StormData.csv"))
head(read.table("repdata_data_StormData.csv"))
head(read.csv("repdata_data_StormData.csv"))
data_orig <- fread("repdata_data_StormData.csv")
data_orig <- fread("repdata_data_StormData.csv", verbose=TRUE)
data_orig <- read.table("repdata_data_StormData.csv")
